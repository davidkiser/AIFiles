# setup-samba.yml
- name: Set up Samba share with proper write perms on all hosts
  hosts: all
  become: true
  collections:
    - ansible.posix

  vars:
    smb_share_name: "share"
    smb_share_path: "/srv/share"

    # Pull passwords from .env; per-user vars are optional.
    glenn_password: "{{ lookup('ini', 'SMB_PASSWORD_GLENN type=properties file=.env') | default('', true) }}"
    david_password: "{{ lookup('ini', 'SMB_PASSWORD_DAVID type=properties file=.env') | default('', true) }}"
    fallback_password: "{{ lookup('ini', 'SMB_PASSWORD type=properties file=.env') }}"

    smb_users:
      - name: "glenn"
        set_nologin: true               # create as service-style account if missing
        password: "{{ glenn_password if glenn_password|length > 0 else fallback_password }}"
      - name: "david"
        set_nologin: false              # existing real user; don't change shell
        password: "{{ david_password if david_password|length > 0 else fallback_password }}"

  tasks:
    - name: Ensure required packages are present
      apt:
        name:
          - samba
          - samba-common-bin
          - acl
        state: present
        update_cache: yes

    - name: Ensure sambashare group exists
      group:
        name: sambashare
        state: present

    - name: Ensure share directory exists, owned by root:sambashare and setgid
      file:
        path: "{{ smb_share_path }}"
        state: directory
        owner: root
        group: sambashare
        mode: "2770"

    - name: Ensure Linux users exist and are in sambashare group
      user:
        name: "{{ item.name }}"
        state: present
        shell: "{{ '/usr/sbin/nologin' if item.set_nologin else omit }}"
        groups: sambashare
        append: yes
        create_home: "{{ false if item.set_nologin else omit }}"
      loop: "{{ smb_users }}"

    - name: Ensure Samba users exist (add if missing)
      shell: |
        set -e
        if pdbedit -L | awk -F: '{print $1}' | grep -qx "{{ item.name }}"; then
          exit 0
        fi
        (printf '%s\n%s\n' "{{ item.password }}" "{{ item.password }}" | smbpasswd -s -a "{{ item.name }}")
      args:
        executable: /bin/bash
      register: smb_user_added
      changed_when: smb_user_added.rc == 0 and "'Added user' in smb_user_added.stdout"
      failed_when: smb_user_added.rc not in [0]
      no_log: true
      loop: "{{ smb_users }}"

    # ACLs so everyone in sambashare can write, regardless of creator
    - name: Ensure ACCESS ACL for sambashare group on the share
      ansible.posix.acl:
        path: "{{ smb_share_path }}"
        entity: sambashare
        etype: group
        permissions: rwx
        state: present

    - name: Ensure DEFAULT ACL for sambashare group on the share
      ansible.posix.acl:
        path: "{{ smb_share_path }}"
        entity: sambashare
        etype: group
        permissions: rwx
        default: yes
        state: present

    - name: Write /etc/samba/smb.conf with ACL-friendly settings
      copy:
        dest: /etc/samba/smb.conf
        content: |
          [global]
              workgroup = WORKGROUP
              server string = %h server (Samba)
              log file = /var/log/samba/log.%m
              max log size = 1000
              logging = file
              server role = standalone server
              map to guest = bad user
              security = user
              server min protocol = SMB2_10
              server max protocol = SMB3
              disable netbios = yes
              dns proxy = no
              vfs objects = acl_xattr
              map acl inherit = yes
              store dos attributes = yes

          [{{ smb_share_name }}]
              path = {{ smb_share_path }}
              browseable = yes
              writable  = yes
              valid users = @sambashare
              force group = sambashare
              create mask = 0660
              directory mask = 2770
              inherit acls = yes
              inherit permissions = yes
      notify: Restart smbd

    - name: Ensure smbd is enabled and running
      systemd:
        name: smbd
        enabled: true
        state: started

  handlers:
    - name: Restart smbd
      systemd:
        name: smbd
        state: restarted

