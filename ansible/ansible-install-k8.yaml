---
- name: Setup Ubuntu 24.04 for AI workloads with MicroK8s
  hosts: all
  become: true
  vars:
    static_ip: "192.168.1.240"
    gateway: "192.168.1.1"
    dns_servers: ["1.1.1.1", "8.8.8.8"]
    interface_name: "wlxb0594700cb17"
    local_user: "david"
  vars_prompt:
    - name: wifi_password
      prompt: "Enter Wi-Fi Password"
      private: yes

  tasks:

    - name: Set static IP via Netplan
      copy:
        dest: /etc/netplan/01-netcfg.yaml
        content: |
          network:
            version: 2
            renderer: networkd
            wifis:
              {{ interface_name }}:
                addresses: [{{ static_ip }}/24]
                gateway4: {{ gateway }}
                nameservers:
                  addresses: {{ dns_servers }}
                access-points:
                  "hyperboria":
                     password: "{{ wifi_password }}" 

    - name: Fix permissions for Netplan files
      file:
        path: "{{ item }}"
        mode: '0600'
      loop:
        - /etc/netplan/01-netcfg.yaml
        - /etc/netplan/50-cloud-init.yaml
      ignore_errors: yes

    - name: Apply Netplan configuration
      command: netplan apply

    - name: Install Docker prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: true

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker apt repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: true


    - name: Install MicroK8s
      snap:
        name: microk8s
        classic: true

    - name: Add 'david' to sudo and docker groups
      user:
        name: "{{ local_user }}"
        groups: sudo,docker,microk8s
        append: yes

    - name: Install required base packages
      apt:
        name:
          - python3-pip
          - curl
          - gnupg
          - ca-certificates
          - git
        state: present
        update_cache: true

    - name: Install MicroK8s
      snap:
        name: microk8s
        classic: true

    - name: Wait for MicroK8s to be ready
      shell: microk8s status --wait-ready
      register: mk8s_status
      retries: 5
      delay: 10
      until: mk8s_status.rc == 0

    - name: Enable useful MicroK8s add-ons
      shell: |
        microk8s enable dns storage ingress dashboard
        microk8s enable gpu || true  # Will succeed only if supported
      args:
        executable: /bin/bash

    - name: Create .kube directory for user
      file:
        path: /home/{{ local_user }}/.kube
        state: directory
        owner: "{{ local_user }}"
        group: "{{ local_user }}"
        mode: '0755'

    - name: Retrieve MicroK8s kubeconfig
      command: microk8s config
      register: kubeconfig

    - name: Write kubeconfig to user's .kube/config
      copy:
        content: "{{ kubeconfig.stdout }}"
        dest: "/home/{{ local_user }}/.kube/config"
        owner: "{{ local_user }}"
        group: "{{ local_user }}"
        mode: '0600'

    - name: Add NVIDIA libnvidia-container GPG key
      shell: |
        curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
      args:
        creates: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg

    - name: Add NVIDIA libnvidia-container stable repository
      shell: |
        curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
        sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
        tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
      args:
        executable: /bin/bash

    - name: Update apt after adding NVIDIA repo
      apt:
        update_cache: true

    - name: Set NVIDIA Container Toolkit version as a fact
      set_fact:
        nvidia_toolkit_version: "1.17.8-1"

    - name: Install NVIDIA Container Toolkit and dependencies
      apt:
        name:
          - "nvidia-container-toolkit={{ nvidia_toolkit_version }}"
          - "nvidia-container-toolkit-base={{ nvidia_toolkit_version }}"
          - "libnvidia-container-tools={{ nvidia_toolkit_version }}"
          - "libnvidia-container1={{ nvidia_toolkit_version }}"
        state: present

    - name: Install NVIDIA GPU driver (if applicable)
      shell: |
        ubuntu-drivers devices | grep recommended | awk '{print $3}' | xargs -I{} apt install -y {}
      register: driver_install
      changed_when: "'installed' in driver_install.stdout"

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
        enabled: true

    - name: Ensure venv module is installed
      apt:
        name: python3-venv
        state: present

    - name: Create a Python virtual environment
      command: python3 -m venv /home/{{ local_user }}/ai-venv
      args:
        creates: /home/{{ local_user }}/ai-venv

    - name: Install AI libraries into the virtual environment
      pip:
        name:
          - torch
          - torchvision
          - transformers
          - jupyterlab
        virtualenv: /home/{{ local_user }}/ai-venv
        virtualenv_command: python3 -m venv
        virtualenv_python: python3
        state: present

    - name: Ensure user owns virtualenv
      file:
        path: /home/{{ local_user }}/ai-venv
        state: directory
        recurse: yes
        owner: "{{ local_user }}"
        group: "{{ local_user }}"

    - name: Download Helm install script
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0755'

    - name: Run Helm install script
      command: /tmp/get_helm.sh
      args:
        creates: /usr/local/bin/helm

    - name: Verify Helm installation
      command: helm version
      register: helm_version
      changed_when: false

    - name: Ensure snapd is installed
      apt:
        name: snapd
        state: present
        update_cache: yes

    - name: Ensure core snap is installed
      snap:
        name: core
        state: present

    - name: Install kubectl via snap with classic confinement
      shell: snap install kubectl --classic
      args:
        creates: /snap/bin/kubectl

